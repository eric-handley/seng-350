# SENG350: Cycle 1 Implementation Rubric

**Total Marks: 100**

### Functionality (25 marks)

| Feature | Marks | Comments |
|---|---|---|
| **Staff Features** | /10 | |
| View available classrooms and reserve with one click | /4 | |
| Cancellation and rollback/undo | /3 | |
| View own booking history | /3 | |
| **Registrar Features** | /10 | |
| Maintain classrooms and time slots | /4 | |
| Handle escalations (manual release, block accounts) | /3 | |
| View statistics/logs | /3 | |
| **Admin Features** | /3 | |
| System-level configuration and audit records | /3 | |
| **Concurrency** | /2 | |
| Prevents double bookings for the same time slot | /2 | |

### Adherence to Design (15 marks)

| Criteria | Marks | Comments |
|---|---|---|
| **Follows ADRs** | /5 | The implementation is consistent with the Architecture Decision Records created in Part 1. |
| **Requirements Coverage** | /5 | The implementation addresses the user stories and functional requirements from the PRD. |
| **Explained Deviations** | /5 | Any deviations from the original design are clearly explained and justified in `Changes.md`, demonstrating thoughtful adaptation rather than last-minute changes. |


### Code Quality & Design (20 marks)

| Criteria | Marks | Comments |
|---|---|---|
| **Code Readability & Style** | /10 | Adherence to language-specific conventions, clear naming, and consistent formatting. |
| **Architecture & Design** | /10 | Logical organization and separation of concerns. |
| REMOVED: API DOCS | +5 bonus marks | |

### Testing (20 marks)

| Criteria | Marks | Comments |
|---|---|---|
| **Unit Tests** | /5 | Core business logic is tested in isolation. |
| **Integration Tests** | /5 | Interactions between components are tested. |
| **Acceptance Tests** | /5 | Key user stories and functional requirements are validated. |
| **Test Coverage** | /5 | Justification for test coverage is provided and reasonable. |


### Deployment & DevOps (5 marks)

| Criteria | Marks | Comments |
|---|---|---|
| **Containerization** | /5 | The application can be successfully built and run as a Docker container. |
| **~~CI/CD~~** | +3 bonus marks | ~~A continuous integration pipeline is set up to automate testing and/or deployment.~~ |


### Project Management & Collaboration (15 marks)

| Criteria                          | Marks | Comments                                           |
| --------------------------------- | ----- | -------------------------------------------------- |
| **Version Control**               | /5    | Consistent and meaningful commit history.          |
| **Issue Tracking & Code Reviews** | /5    | Issues are tracked and code reviews are performed. |
| **Prompting documented**          | /5    | AI prompts are properly documented and recorded    |

## Scope Management Document
A document `ScopeChanges.md`, in the main repo:

  - a summary of the scope of work your team **anticipated** in the Design phase (e.g., the user stories you created)
  - the **challenges encountered** in addressing that scope, e.g., difficulty with Gitlab, time pressures, AI hallucinations.
  - the **revised/reduced scope** addressed in the work completed in Cycle 1. Estimate the percentage of deliverables completed and remaining. 

Please use this short document to explain where the client's vision (Neil's vision) was unrealistic and impossible to meet. The revised scope will be the basis for the marks in the **Features** and **Requirements Coverage** portions of the marking rubric.

This document will be evaluated relative to your team's repository and work record. Your document should reflect what is visible in the repository as evidence for the revised scope. 

What would be a problem:
- little evidence of work in Gitlab (e.g., very few lines committed)
- poor lab and class attendance.
- last minute AI code slop as evidence of work happening.
- scope changes due to lack of effort or willingness to get assistance.